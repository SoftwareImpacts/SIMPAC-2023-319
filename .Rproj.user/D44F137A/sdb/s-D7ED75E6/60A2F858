{
    "collab_server" : "",
    "contents" : "#' @export\n#' @importFrom utils head tail \n#' @importFrom graphics par axis title plot rect legend\n#' @importFrom mhsmm simulate.hmmspec hmmspec dnorm.hsmm rnorm.hsmm\n#' @importFrom PhysicalActivity dataCollapser\n\naccSummary <- function (data, tri = \"FALSE\", axis = \"NULL\", spuriousDef = 20, \n                         nonwearDef = 60, minWear = 600, patype = c(\"MVPA\"), pacut = c(1952), \n                         epoch = \"1 min\", boutsize = 10, tolerance = \"TRUE\", returnbout = \"TRUE\") \n{\n  \n  \n  #data=testData; tri='TRUE'; axis='vm';spuriousDef=20; nonwearDef=60; minWear=600;patype='MVPA';pacut=c(1952,Inf);epoch='10 sec';boutsize=10; tolerance='TRUE';returnbout='FALSE'\n  \n  \n  isSec <- grepl(\"sec\", epoch) | grepl(\"sec.\", epoch) | grepl(\"seconds\", \n                                                              epoch) | grepl(\"Seconds\", epoch) | grepl(\"Sec\", epoch) | \n    grepl(\"Sec.\", epoch)\n  isMin <- grepl(\"min\", epoch) | grepl(\"Min\", epoch) | grepl(\"minutes\", \n                                                             epoch) | grepl(\"Min\", epoch) | grepl(\"Min.\", epoch) | \n    grepl(\"Minutes\", epoch)\n  epLength <- as.numeric(unlist(strsplit(epoch, \"[^[:digit:]]\")))[1]\n  if (isSec == \"TRUE\" & epLength > 60) {\n    stop(\"Please specify epoch size less than or equal to 60 seconds.\")\n  }\n  if (isSec == \"TRUE\" & epLength == 0) {\n    stop(\"Please specify epoch size greater than 0.\")\n  }\n  if (isMin == \"TRUE\" & epLength != 1) {\n    stop(\"Epoch size cannot be greater than 1 minute.\")\n  }\n  if (tri == \"TRUE\" & is.null(axis)) {\n    stop(\"Please choose an option for 'axis'. Choose from options 'vm', 'sum', 'x', 'y', or 'z'.\")\n  }\n  if (tri == \"TRUE\" & !is.null(axis)) {\n    if (axis == \"vm\") {\n      data$counts <- sqrt(data[, 2]^2 + data[, 3]^2 + data[, \n                                                           4]^2)\n    }\n    if (axis == \"sum\") {\n      data$counts <- sqrt(data[, 2] + data[, 3] + data[, \n                                                       4])\n    }\n    if (axis == \"x\") {\n      data$counts <- data[, 2]\n    }\n    if (axis == \"y\") {\n      data$counts <- data[, 3]\n    }\n    if (axis == \"z\") {\n      data$counts <- data[, 4]\n    }\n  }\n  if (length(patype) > 1) {\n    stop(\"Please specify one patype. Please use function acc to obtain summary for multiple physical activities\")\n  }\n  if (boutsize == 0) {\n    stop(\"Please specify bout size of at least 1\")\n  }\n  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - \n                                                                     round(x)) < tol\n  if (is.wholenumber(boutsize) == \"FALSE\") {\n    stop(\"Please specify bout size as an integer value\")\n  }\n  epochData <- mean(c(as.numeric(difftime(strptime(data$TimeStamp[2], \n                                                   format = \"%Y-%m-%d %H:%M:%S\"), strptime(data$TimeStamp[1], \n                                                                                           format = \"%Y-%m-%d %H:%M:%S\"), units = c(\"secs\"))), as.numeric(difftime(strptime(data$TimeStamp[3], \n                                                                                                                                                                            format = \"%Y-%m-%d %H:%M:%S\"), strptime(data$TimeStamp[2], \n                                                                                                                                                                                                                    format = \"%Y-%m-%d %H:%M:%S\"), units = c(\"secs\"))), as.numeric(difftime(strptime(data$TimeStamp[4], \n                                                                                                                                                                                                                                                                                                     format = \"%Y-%m-%d %H:%M:%S\"), strptime(data$TimeStamp[3], \n                                                                                                                                                                                                                                                                                                                                             format = \"%Y-%m-%d %H:%M:%S\"), units = c(\"secs\")))), \n                    na.rm = TRUE)\n  uncollapsed <- data\n  if (isSec == \"TRUE\" & epLength < epochData) {\n    stop(paste(\"You have specified \", epoch, \" to summarize the data, but the sampling frequency of your data is \", \n               epochData, \" seconds.\", sep = \"\"))\n  }\n  if (isMin == \"TRUE\" & (epLength * 60) < epochData) {\n    stop(paste(\"You have specified \", epoch, \" to summarize the data, but the sampling frequency of your data is \", \n               epochData, \" seconds.\", sep = \"\"))\n  }\n  if (epochData < 60) {\n    data <- dataCollapse(data, TS = \"TimeStamp\", col = \"counts\", by = 60)\n  } # View(data)\n  if (epochData > 60) {\n    stop(\"Epoch is larger than 60 seconds. Please provide a dataset with epoch of 1 minutes or less\")\n  }\n  value <- rep(rle(as.numeric(data$counts))$values, rle(as.numeric(data$counts))$lengths)\n  length <- rep(rle(as.numeric(data$counts))$lengths, rle(as.numeric(data$counts))$lengths)\n  d1.lag <- cbind(data, value, length, head = head(c(0, length), \n                                                   -1), tail = tail(c(length, 0), -1), dif1 = head(c(0, \n                                                                                                     length), -1) - length, dif2 = tail(c(length, 0), -1) - \n                    length, actb = head(c(0, data$counts), -1), acta = tail(c(data$counts, \n                                                                              0), -1))\n  spDef <- spuriousDef - 1\n  d1s <- cbind(d1.lag, spurious = ifelse(d1.lag$dif1 >= spDef & \n                                           d1.lag$dif2 >= spDef & d1.lag$actb == 0 & d1.lag$acta == \n                                           0, 1, 0))\n  d1s$counts2 <- ifelse(d1s$spurious == 1, 0, d1s$counts)\n  d2 <- data.frame(TimeStamp = d1s$TimeStamp, counts = d1s$counts2)\n  value2 <- rep(rle(as.numeric(d2$counts))$values, rle(as.numeric(d2$counts))$lengths)\n  length2 <- rep(rle(as.numeric(d2$counts))$lengths, rle(as.numeric(d2$counts))$lengths)\n  d2w <- cbind(d2, value2, length2)\n  nonwear <- ifelse(d2w$value2 == 0 & d2w$length > nonwearDef, \n                    1, 0)\n  d2nw <- cbind(d2w, nonwear)\n  d3 <- data.frame(TimeStamp = d2nw$TimeStamp, counts = d2nw$counts, \n                   nonwear = d2nw$nonwear)\n  d3$countsWear <- ifelse(d3$nonwear == 1, NA, d3$counts)\n  d3$mydates <- as.factor(as.numeric(strptime(d3$TimeStamp, \n                                              format = \"%Y-%m-%d\")))\n  uniqueDates <- unique(strptime(d3$TimeStamp, format = \"%Y-%m-%d\"))\n  d3$wear <- ifelse(d3$nonwear == 1, 0, 1)\n  dts <- strptime(d3$TimeStamp, format = \"%Y-%m-%d %H:%M:%S\")\n  wearSum <- tapply(d3$wear, format(dts, format = \"%Y-%m-%d\"), \n                    sum)\n  wearTime <- data.frame(Date = names(wearSum), wearTime = wearSum)\n  if (tolerance == \"TRUE\" & boutsize > 2) {\n    tolerance <- 2\n  }\n  if (tolerance == \"FALSE\") {\n    tolerance <- 0\n  }\n  if (tolerance == \"TRUE\" & boutsize <= 2) {\n    tolerance <- 0\n  }\n  myRollSum<- function(x, k) { \n    rs <- roll_sum(x, k)\n    rsp <- c(rs,rep(NA,k-1))\n    return(rsp)\n  }\n  myLag <- function(x, k) {\n    c(rep(NA, k), x)[1:length(x)]\n  }\n  myLagUp <- function(x, k) {\n    c(x[(k + 1):(length(x))], rep(NA, k))\n  }\n  if (isSec == TRUE & epLength < 60) {\n    if (epLength != 60) {\n      data <- dataCollapse(uncollapsed, TS = \"TimeStamp\", \n                           col = \"counts\", by = epLength)\n    }\n    data$Time <- substring(data$TimeStamp, 1, 16)\n    d3$Time <- substring(d3$TimeStamp, 1, 16)\n    myvars <- names(d3) %in% c(\"TimeStamp\", \"counts\", \"countsWear\")\n    d3 <- d3[!myvars]\n    d3 <- merge(data, d3, by = \"Time\")\n    d3$countsWear <- ifelse(d3$nonwear == 1, NA, d3$counts)\n    d3$inPA <- ifelse(d3$countsWear >= as.numeric(pacut[1]) & \n                        d3$countsWear <= as.numeric(pacut[2]), 1, 0)\n    d3$inPA2 <- ifelse(is.na(d3$inPA), 0, d3$inPA)\n    d3$mydates <- as.factor(as.numeric(strptime(d3$TimeStamp, \n                                                format = \"%Y-%m-%d\")))\n    boutsize <- boutsize * (60/epLength)\n    mybPA <- boutsize - tolerance * (60/epLength)\n    mylistPA <- list()\n    dSplitPA <- split(d3, d3$mydates)\n    for (k in 1:length(dSplitPA)) {\n      dsiPA <- data.frame(dSplitPA[k])\n      dsidPA <- data.frame(TimeStamp = dsiPA[, 2], counts = dsiPA[, \n                                                                  3], nonwear = dsiPA[, 4], inPA2 = dsiPA[, 9])\n      dsidPA$mvpaB <- myRollSum(dsidPA$inPA2, boutsize)\n      dsidPA$mvB <- ifelse(dsidPA$mvpaB >= mybPA, 1, 0)\n      suppressWarnings(rm(bm))\n      bm <- matrix(NA, nrow = nrow(dsidPA), ncol = (boutsize + \n                                                      1))\n      bm[, 1] <- dsidPA$mvB\n      for (i in 1:(boutsize - 1)) {\n        bm[, (i + 1)] <- myLag(dsidPA$mvB, i)\n      }\n      if (boutsize > 1) {\n        bm[, ncol(bm)] <- rowSums(bm[, 1:(ncol(bm) - \n                                            1)], na.rm = TRUE)\n        dsidPA$inbout <- ifelse(bm[, ncol(bm)] >= 1, \n                                1, 0)\n        dsidPA$inboutLagb1 <- myLag(dsidPA$inbout, 1)\n        dsidPA$inboutLagb2 <- myLag(dsidPA$inbout, 2)\n        dsidPA$PALagb1 <- myLag(dsidPA$inPA2, 1)\n        dsidPA$inboutUpLagb1 <- myLagUp(dsidPA$inbout, \n                                        1)\n        dsidPA$inboutUpLagb2 <- myLagUp(dsidPA$inbout, \n                                        2)\n        dsidPA$PALagUpb1 <- myLagUp(dsidPA$inPA2, 1)\n        dsidPA$inbout[dsidPA$inbout == 1 & dsidPA$inboutLagb1 == \n                        0 & dsidPA$inPA2 == 0] <- 0\n        dsidPA$inbout[dsidPA$inbout == 1 & dsidPA$inboutLagb2 == \n                        0 & dsidPA$PALagb1 == 0 & dsidPA$inPA2 == 0] <- 0\n        dsidPA$inbout[dsidPA$inbout == 1 & dsidPA$inboutUpLagb1 == \n                        0 & dsidPA$inPA2 == 0] <- 0\n        dsidPA$inbout[dsidPA$inbout == 1 & dsidPA$inboutUpLagb2 == \n                        0 & dsidPA$PALagUpb1 == 0 & dsidPA$inPA2 == \n                        0] <- 0\n        dsidPA$value <- rep(rle(as.numeric(dsidPA$inbout))$values, \n                            rle(as.numeric(dsidPA$inbout))$lengths)\n        dsidPA$length <- rep(rle(as.numeric(dsidPA$inbout))$lengths, \n                             rle(as.numeric(dsidPA$inbout))$lengths)\n        dsidPA$valueLag <- myLag(dsidPA$value)\n        dsidPA$lengthLag <- myLag(dsidPA$length)\n        dsidPA$first <- ifelse(dsidPA$value == dsidPA$valueLag & \n                                 dsidPA$length == dsidPA$lengthLag, 0, 1)\n        dsidPA$first[1] <- ifelse(dsidPA$inbout[1] == \n                                    1, 1, 0)\n        dsidPA$wear <- ifelse(dsidPA$nonwear == 0, 1, \n                              0)\n        dsidPA$firstBout <- ifelse(dsidPA$first == 1 & \n                                     dsidPA$inbout == 1 & dsidPA$wear == 1 & dsidPA$length >= \n                                     boutsize, 1, 0)\n      }\n      if (boutsize == 1) {\n        dsidPA$inbout <- ifelse(bm[, 1] >= 1, 1, 0)\n        dsidPA$inboutLagb1 <- NA\n        dsidPA$inboutLagb2 <- NA\n        dsidPA$PALagb1 <- NA\n        dsidPA$inboutUpLagb1 <- NA\n        dsidPA$inboutUpLagb2 <- NA\n        dsidPA$PALagUpb1 <- NA\n        dsidPA$value <- rep(rle(as.numeric(dsidPA$inbout))$values, \n                            rle(as.numeric(dsidPA$inbout))$lengths)\n        dsidPA$length <- rep(rle(as.numeric(dsidPA$inbout))$lengths, \n                             rle(as.numeric(dsidPA$inbout))$lengths)\n        dsidPA$valueLag <- myLag(dsidPA$value)\n        dsidPA$lengthLag <- myLag(dsidPA$length)\n        dsidPA$first <- ifelse(dsidPA$value == dsidPA$valueLag & \n                                 dsidPA$length == dsidPA$lengthLag, 0, 1)\n        dsidPA$first[1] <- ifelse(dsidPA$inbout[1] == \n                                    1, 1, 0)\n        dsidPA$wear <- ifelse(dsidPA$nonwear == 0, 1, \n                              0)\n        dsidPA$firstBout <- ifelse(dsidPA$first == 1 & \n                                     dsidPA$inbout == 1 & dsidPA$wear == 1 & dsidPA$length >= \n                                     boutsize, 1, 0)\n      }\n      mylistPA[[k]] <- dsidPA\n      rm(dsidPA)\n    }\n    dfPA <- do.call(\"rbind\", mylistPA)\n    boutsPA <- data.frame(TimeStamp = dfPA$TimeStamp, counts = dfPA$counts, \n                          inPA = dfPA$inPA2, nonwear = dfPA$nonwear, inboutPA = dfPA$inbout)\n    dfPA$inPABout <- ifelse(dfPA$inbout == 1 & dfPA$wear == \n                              1, 1, 0)\n    d4.tempPA <- dfPA[which(dfPA$firstBout == 1 & dfPA$wear == \n                              1), ]\n    boutSumPA <- tapply(d4.tempPA$firstBout, format(strptime(d4.tempPA$TimeStamp, \n                                                             format = \"%Y-%m-%d %H:%M:%S\"), format = \"%Y-%m-%d\"), \n                        sum)\n    numBoutsPA <- data.frame(Date = names(boutSumPA), numberOfBoutsPA = boutSumPA)\n    d4PA <- data.frame(TimeStamp = d4.tempPA$TimeStamp, paMinutes = d4.tempPA$length)\n    dts2PA <- strptime(d4PA$TimeStamp, format = \"%Y-%m-%d %H:%M:%S\")\n    d4PA$Date <- format(dts2PA, format = \"%Y-%m-%d\")\n    d4PA$TimeStamp <- NULL\n    daySumPA <- round(tapply(d4PA$paMinutes, format(dts2PA, \n                                                    format = \"%Y-%m-%d\"), sum)/(60/epLength), 0)\n    if (boutsize > 1) {\n      pasummary <- data.frame(Date = rownames(daySumPA), \n                              paMinutes = daySumPA, numberOfBoutsPA = boutSumPA)\n    }\n    if (boutsize == 1) {\n      pasummary <- data.frame(Date = rownames(daySumPA), \n                              paMinutes = daySumPA, numberOfBoutsPA = daySumPA)\n    }\n    rownames(pasummary) <- NULL\n    if (nrow(pasummary) == 0) {\n      pasummary <- data.frame(format(dfPA$TimeStamp[1], \n                                     format = \"%Y-%m-%d\"), matrix(rep(NA, 2), ncol = 2))\n    }\n    mycolname1 <- paste(patype, \".minutes\", sep = \"\")\n    mycolname2 <- paste(patype, \".num.bouts\", sep = \"\")\n    colnames(pasummary) <- c(\"Date\", mycolname1, mycolname2)\n    summarized <- list()\n    summarized$validDates <- pasummary\n    summarized$wearTime <- wearTime\n    summary <- Reduce(function(...) merge(..., all = TRUE), \n                      summarized)\n    summary[is.na(summary)] <- 0\n    summary <- summary[which(summary$wearTime >= minWear), \n                       ]\n    summary <- summary[order(as.Date(summary$Date)), ]\n    if (returnbout == \"FALSE\") {\n      return(summary)\n    }\n    if (returnbout == \"TRUE\") {\n      summarized <- list()\n      summarized$totalDates <- uniqueDates\n      summarized$validDates <- summary\n      summarized$PA <- boutsPA\n      summarized$boutsize <- boutsize\n      summarized$pacut <- pacut\n      return(summarized)\n    }\n  }\n  if ((isMin == TRUE & epLength == 1) | (isSec == TRUE & epLength == \n                                         60)) {\n    mybPA <- boutsize - tolerance\n    d3$countsWear <- ifelse(d3$nonwear == 1, NA, d3$counts)\n    d3$inPA <- ifelse(d3$countsWear >= as.numeric(pacut[1]) & \n                        d3$countsWear <= as.numeric(pacut[2]), 1, 0)\n    d3$inPA2 <- ifelse(is.na(d3$inPA), 0, d3$inPA)\n    d3$mydates <- as.factor(as.numeric(strptime(d3$TimeStamp, \n                                                format = \"%Y-%m-%d\")))\n    mylistPA <- list()\n    dSplitPA <- split(d3, d3$mydates)\n    for (k in 1:length(dSplitPA)) {\n      dsiPA <- data.frame(dSplitPA[k])\n      dsidPA <- data.frame(TimeStamp = dsiPA[, 1], counts = dsiPA[, \n                                                                  2], nonwear = dsiPA[, 3], inPA2 = dsiPA[, 8])\n      dsidPA$mvpaB <- myRollSum(dsidPA$inPA2, boutsize)\n      dsidPA$mvB <- ifelse(dsidPA$mvpaB >= mybPA, 1, 0)\n      suppressWarnings(rm(bm))\n      bm <- matrix(NA, nrow = nrow(dsidPA), ncol = (boutsize + \n                                                      1))\n      bm[, 1] <- dsidPA$mvB\n      for (i in 1:(boutsize - 1)) {\n        bm[, (i + 1)] <- myLag(dsidPA$mvB, i)\n      }\n      if (boutsize > 1) {\n        bm[, ncol(bm)] <- rowSums(bm[, 1:(ncol(bm) - \n                                            1)], na.rm = TRUE)\n        dsidPA$inbout <- ifelse(bm[, ncol(bm)] >= 1, \n                                1, 0)\n        dsidPA$inboutLagb1 <- myLag(dsidPA$inbout, 1)\n        dsidPA$inboutLagb2 <- myLag(dsidPA$inbout, 2)\n        dsidPA$PALagb1 <- myLag(dsidPA$inPA2, 1)\n        dsidPA$inboutUpLagb1 <- myLagUp(dsidPA$inbout, \n                                        1)\n        dsidPA$inboutUpLagb2 <- myLagUp(dsidPA$inbout, \n                                        2)\n        dsidPA$PALagUpb1 <- myLagUp(dsidPA$inPA2, 1)\n        dsidPA$inbout[dsidPA$inbout == 1 & dsidPA$inboutLagb1 == \n                        0 & dsidPA$inPA2 == 0] <- 0\n        dsidPA$inbout[dsidPA$inbout == 1 & dsidPA$inboutLagb2 == \n                        0 & dsidPA$PALagb1 == 0 & dsidPA$inPA2 == 0] <- 0\n        dsidPA$inbout[dsidPA$inbout == 1 & dsidPA$inboutUpLagb1 == \n                        0 & dsidPA$inPA2 == 0] <- 0\n        dsidPA$inbout[dsidPA$inbout == 1 & dsidPA$inboutUpLagb2 == \n                        0 & dsidPA$PALagUpb1 == 0 & dsidPA$inPA2 == \n                        0] <- 0\n        dsidPA$value <- rep(rle(as.numeric(dsidPA$inbout))$values, \n                            rle(as.numeric(dsidPA$inbout))$lengths)\n        dsidPA$length <- rep(rle(as.numeric(dsidPA$inbout))$lengths, \n                             rle(as.numeric(dsidPA$inbout))$lengths)\n        dsidPA$valueLag <- myLag(dsidPA$value)\n        dsidPA$lengthLag <- myLag(dsidPA$length)\n        dsidPA$first <- ifelse(dsidPA$value == dsidPA$valueLag & \n                                 dsidPA$length == dsidPA$lengthLag, 0, 1)\n        dsidPA$first[1] <- ifelse(dsidPA$inbout[1] == \n                                    1, 1, 0)\n        dsidPA$wear <- ifelse(dsidPA$nonwear == 0, 1, \n                              0)\n        dsidPA$firstBout <- ifelse(dsidPA$first == 1 & \n                                     dsidPA$inbout == 1 & dsidPA$wear == 1 & dsidPA$length >= \n                                     boutsize, 1, 0)\n      }\n      if (boutsize == 1) {\n        dsidPA$inbout <- ifelse(bm[, 1] >= 1, 1, 0)\n        dsidPA$inboutLagb1 <- NA\n        dsidPA$inboutLagb2 <- NA\n        dsidPA$PALagb1 <- NA\n        dsidPA$inboutUpLagb1 <- NA\n        dsidPA$inboutUpLagb2 <- NA\n        dsidPA$PALagUpb1 <- NA\n        dsidPA$value <- rep(rle(as.numeric(dsidPA$inbout))$values, \n                            rle(as.numeric(dsidPA$inbout))$lengths)\n        dsidPA$length <- rep(rle(as.numeric(dsidPA$inbout))$lengths, \n                             rle(as.numeric(dsidPA$inbout))$lengths)\n        dsidPA$valueLag <- myLag(dsidPA$value)\n        dsidPA$lengthLag <- myLag(dsidPA$length)\n        dsidPA$first <- ifelse(dsidPA$value == dsidPA$valueLag & \n                                 dsidPA$length == dsidPA$lengthLag, 0, 1)\n        dsidPA$first[1] <- ifelse(dsidPA$inbout[1] == \n                                    1, 1, 0)\n        dsidPA$wear <- ifelse(dsidPA$nonwear == 0, 1, \n                              0)\n        dsidPA$firstBout <- ifelse(dsidPA$first == 1 & \n                                     dsidPA$inbout == 1 & dsidPA$wear == 1 & dsidPA$length >= \n                                     boutsize, 1, 0)\n      }\n      mylistPA[[k]] <- dsidPA\n      rm(dsidPA)\n    }\n    dfPA <- do.call(\"rbind\", mylistPA)\n    boutsPA <- data.frame(TimeStamp = dfPA$TimeStamp, counts = dfPA$counts, \n                          inPA = dfPA$inPA2, nonwear = dfPA$nonwear, inboutPA = dfPA$inbout)\n    dfPA$inPABout <- ifelse(dfPA$inbout == 1 & dfPA$wear == \n                              1, 1, 0)\n    d4.tempPA <- dfPA[which(dfPA$firstBout == 1 & dfPA$wear == \n                              1), ]\n    boutSumPA <- tapply(d4.tempPA$firstBout, format(strptime(d4.tempPA$TimeStamp, \n                                                             format = \"%Y-%m-%d %H:%M:%S\"), format = \"%Y-%m-%d\"), \n                        sum)\n    numBoutsPA <- data.frame(Date = names(boutSumPA), numberOfBoutsPA = boutSumPA)\n    d4PA <- data.frame(TimeStamp = d4.tempPA$TimeStamp, paMinutes = d4.tempPA$length)\n    dts2PA <- strptime(d4PA$TimeStamp, format = \"%Y-%m-%d %H:%M:%S\")\n    d4PA$Date <- format(dts2PA, format = \"%Y-%m-%d\")\n    d4PA$TimeStamp <- NULL\n    daySumPA <- tapply(d4PA$paMinutes, format(dts2PA, format = \"%Y-%m-%d\"), \n                       sum)\n    if (boutsize > 1) {\n      pasummary <- data.frame(Date = rownames(daySumPA), \n                              paMinutes = daySumPA, numberOfBoutsPA = boutSumPA)\n    }\n    if (boutsize == 1) {\n      pasummary <- data.frame(Date = rownames(daySumPA), \n                              paMinutes = daySumPA, numberOfBoutsPA = daySumPA)\n    }\n    rownames(pasummary) <- NULL\n    if (nrow(pasummary) == 0) {\n      pasummary <- data.frame(format(dfPA$TimeStamp[1], \n                                     format = \"%Y-%m-%d\"), matrix(rep(NA, 2), ncol = 2))\n    }\n    mycolname1 <- paste(patype, \".minutes\", sep = \"\")\n    mycolname2 <- paste(patype, \".num.bouts\", sep = \"\")\n    colnames(pasummary) <- c(\"Date\", mycolname1, mycolname2)\n    summarized <- list()\n    summarized$validDates <- pasummary\n    summarized$wearTime <- wearTime\n    summary <- Reduce(function(...) merge(..., all = TRUE), \n                      summarized)\n    summary[is.na(summary)] <- 0\n    summary <- summary[which(summary$wearTime >= minWear), \n                       ]\n    summary <- summary[order(as.Date(summary$Date)), ]\n    if (returnbout == \"FALSE\") {\n      return(summary)\n    }\n    if (returnbout == \"TRUE\") {\n      summarized <- list()\n      summarized$totalDates <- uniqueDates\n      summarized$validDates <- summary\n      summarized$PA <- boutsPA\n      summarized$boutsize <- boutsize\n      summarized$pacut <- pacut\n      return(summarized)\n    }\n  }\n}",
    "created" : 1512343789644.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4080682072",
    "id" : "60A2F858",
    "lastKnownWriteTime" : 1512343700,
    "last_content_update" : 1512343700,
    "path" : "Z:/My documents/1packages/acc/R/accSummary.R",
    "project_path" : "R/accSummary.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
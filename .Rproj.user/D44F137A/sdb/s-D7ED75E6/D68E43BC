{
    "collab_server" : "",
    "contents" : "#' @export\n#' @importFrom utils head tail \n#' @importFrom plyr ddply\n#' @importFrom nleqslv nleqslv\n#' @importFrom stats model.matrix\n#' @importFrom methods getClass\n\n##############################################################################\n# User's Main Function\n##############################################################################\naeefit <- function(formula, data, weight=NULL, se=\"Sandwich\", control=list(), boot=NULL) {\n  \n  method <- \"AEE\"\n  Call <- match.call()\n  fm <- formula\n  \n  #if (is.null(weight)) {\n  #  weight <- rep(1,nrow(data[!duplicated(data[,colnames(data)==formula[[2]]$ID]),]))\n  #} \n  \n  #if (is.null(weight)) {\n  #  weight <- rep(1,nrow(X))\n  #} \n  \n  # A PanelSurv object\n  obj <- eval(formula[[2]], data)\n  \n  # Combine respones data frame and covariate data frame (remove intercept column)\n  # Multiple rows per subject\n  formula[[2]] <- NULL\n  \n  if (formula == ~ 1) {\n    DF <- cbind(obj$psDF, zero=0)\n  } else {\n    DF <- cbind(obj$psDF, model.matrix(formula, data))[, -4]\n  }\n  \n  DF <- DF[order(DF$ID, DF$time), ]\n  \n  # Design matrix, one row per subject\n  X <- as.matrix(ddply(DF, \"ID\", head, n=1)[, -c(1:3)])\n  \n  # Create an Engine object\n  engine.control <- control[names(control) %in% names(attr(getClass(method), \"slots\"))]\n  engine <- do.call(\"new\", c(list(Class=method), engine.control))\n  \n  if (length(engine@betaInit) == 1 & ncol(X) > 1)\n    engine@betaInit <- rep(engine@betaInit, ncol(X))\n  if (length(engine@betaInit) > 1 & length(engine@betaInit) != ncol(X))\n    stop(\"Invalid length of initial beta values!\")\n  \n  # Create a StdErr object\n  #if(se == \"NULL\"){\n  #  stdErr <- NULL}\n  #if(se != \"NULL\"){\n    stdErr.control <- control[names(control) %in% names(attr(getClass(se), \"slots\"))]\n    stdErr <- do.call(\"new\", c(list(Class=se), stdErr.control))\n  #}\n  \n  if(se==\"Sandwich\"){\n  fit <- doPanelFit.AEE.Sandwich(DF=DF, panelMatrix=obj$panelMatrix, timeGrid=obj$timeGrid,\n                                 X=X, engine=engine, stdErr ,weight=weight)\n  }\n    \n  if(se==\"Bootstrap\"){\n      fit <- doPanelFit.AEE.Bootstrap(DF=DF, panelMatrix=obj$panelMatrix, timeGrid=obj$timeGrid,\n                                     X=X, engine=engine, stdErr ,weight=weight, boot)\n  }  \n    \n  ret = list(formula=fm, beta=fit$beta, \n        baseline=fit$baseline,\n        timeGrid=fit$timeGrid,\n        lambda=fit$lambda,\n        convergence=fit$convergence,\n        iter=fit$iter,\n        betaSE=fit$betaSE,\n        betaVar=fit$betaVar,\n        baselineSE=fit$baselineSE)\n  \n  class(ret) <- \"aeefit\"\n  ret\n  \n}",
    "created" : 1512343797018.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1017695334",
    "id" : "D68E43BC",
    "lastKnownWriteTime" : 1512343691,
    "last_content_update" : 1512343691,
    "path" : "Z:/My documents/1packages/acc/R/aeefit.R",
    "project_path" : "R/aeefit.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "#' @export\n#' @importFrom utils head tail \n#' @importFrom R.utils countLines\n#' @importFrom iterators ireadLines nextElem \n\n\n\nreadRaw <- function(filepath,type,resting=NULL){\n  \n  filelength <- countLines(filepath)\n  fname <- filepath\n  it <- ireadLines(con=fname,warn=FALSE)\n  #on.exit(close(file(fname)))\n  line1 <- nextElem(it)\n  \n  if(grepl(\"at\", line1) == TRUE & grepl(\"Hz\", line1) == TRUE){\n    hertzPre <- sub(\".*at \", \"\", line1)\n    myhertz <- strsplit(hertzPre, \" \")[[1]][1]\n    devicePre <- sub(\".*ActiGraph \", \"\", line1)\n    device <- strsplit(devicePre, \" \")[[1]][1]\n    dateformatPre <- sub(\".*date format \", \"\", line1)\n    dateformat <- strsplit(dateformatPre, \" \")[[1]][1]\n  }\n  \n  line2 <- nextElem(it)\n  serialNumberPre <- sub(\".*Serial Number: \", \"\", line2)\n  serialNumberPre2 <- strsplit(serialNumberPre, \" \")[[1]][1]\n  serialNumber <- gsub(',,','',serialNumberPre2)\n  \n  line3 <- nextElem(it)\n  startTimePre <- sub(\".*Start Time \", \"\", line3)\n  startTimePre2 <- strsplit(startTimePre, \" \")[[1]][1]\n  startTime <- gsub(',,','',startTimePre2)\n  \n  line4 <- nextElem(it)\n  startDatePre <- sub(\".*Start Date \", \"\", line4)\n  startDatePre2 <- strsplit(startDatePre, \" \")[[1]][1]\n  startDate <- gsub(',,','',startDatePre2)\n  \n  cat(noquote(paste(\"Raw data read for \", device, \" device.\", sep = \"\")))\n  cat(\"\\n\")\n  cat(noquote(paste(\"Start date is \", startDate, \" and sampling rate is \", \n                    myhertz, \" Hz.\", sep = \"\")))\n  cat(\"\\n\")\n  \n  invisible(nextElem(it));\n  invisible(nextElem(it));\n  invisible(nextElem(it));\n  invisible(nextElem(it));\n  invisible(nextElem(it));\n  invisible(nextElem(it));\n  invisible(nextElem(it));\n  \n  # MAD\n  if(type == \"mad\" | type == \"MAD\" | type == \"Mad\"){\n    \n    windowSize <- 6*as.numeric(as.character(myhertz))\n    numit <- floor((filelength[1]-11)/windowSize)\n    mad <- rep(NA, numit)\n    \n    for(j in 1:numit){\n      # A six second window\n      mywindow <- matrix(rep(NA, windowSize*3),ncol=3)\n      for(i in 1:windowSize){\n        myline <- strsplit(nextElem(it), \",\")[[1]]\n        mywindow[i,] <- c(as.numeric(myline[1]),\n                          as.numeric(myline[2]),\n                          as.numeric(myline[3]))\n      }\n      \n      vm1 <- sqrt(mywindow[,1]^2 + mywindow[,2]^2 + mywindow[,3]^2)\n      vm1.mean <- mean(vm1,na.rm=TRUE)\n      mad[j] <- mean(abs(vm1-vm1.mean),na.rm=TRUE)\n    }\n    \n    timeseq <- seq(ISOdate(strsplit(startDate, \"/\")[[1]][3], \n                           strsplit(startDate, \"/\")[[1]][1], \n                           strsplit(startDate, \"/\")[[1]][2], \n                           hour = strsplit(startTime, \":\")[[1]][1], \n                           min = strsplit(startTime, \":\")[[1]][2], \n                           sec = strsplit(startTime, \":\")[[1]][3], tz = \"GMT\"), \n                   by = \"6 sec\", length.out=length(mad))\n    \n    madCat <- mad\n    madCat[mad < .9] <- \"Below Moderate\"\n    madCat[mad >= .9 & mad < 4.14] <- \"Moderate\"\n    madCat[mad >= 4.14] <- \"Vigorous\"\n    \n    mydata <-  data.frame(Time = timeseq,\n                          MAD = mad,\n                          pa.category = madCat)\n  }\n  \n  \n  # AI\n  if(type == \"ai\" | type == \"AI\" | type == \"Ai\"){\n    if((is.numeric(resting)==TRUE) & (length(resting)==3)){rsd <- resting}\n    if((is.numeric(resting)==TRUE) & (length(resting)==1)){rsd <- rep(resting,3)}\n    windowSize <- as.numeric(as.character(myhertz))\n    numit <- floor((filelength[1]-11)/windowSize)\n    ai <- rep(NA, numit)\n    \n    for(j in 1:numit){\n      # A one second window\n      mywindow <- matrix(rep(NA, windowSize*3),ncol=3)\n      for(i in 1:windowSize){\n        myline <- strsplit(nextElem(it), \",\")[[1]]\n        mywindow[i,] <- c(as.numeric(myline[1]),\n                          as.numeric(myline[2]),\n                          as.numeric(myline[3]))\n      }\n      \n      sd11 <- sd(mywindow[,1],na.rm=TRUE)\n      sd12 <- sd(mywindow[,2],na.rm=TRUE)\n      sd13 <- sd(mywindow[,3],na.rm=TRUE)\n      ai[j] <-max((((sd11-rsd[1])/rsd[1]) + ((sd12-rsd[2])/rsd[2]) + ((sd13-rsd[3])/rsd[3])),0)\n    }\n    \n    timeseq <- seq(ISOdate(strsplit(startDate, \"/\")[[1]][3], \n                           strsplit(startDate, \"/\")[[1]][1], \n                           strsplit(startDate, \"/\")[[1]][2], \n                           hour = strsplit(startTime, \":\")[[1]][1], \n                           min = strsplit(startTime, \":\")[[1]][2], \n                           sec = strsplit(startTime, \":\")[[1]][3], tz = \"GMT\"), \n                   by = \"1 sec\", length.out=length(ai))\n    \n    mydata <-  data.frame(Time = timeseq, AI = ai)\n  }\n  \n  \n  # Resting state\n  if(type == \"resting\" | type == \"Resting\" | type == \"RESTING\"){\n    \n    windowSize <- as.numeric(as.character(myhertz))\n    numit <- floor((filelength[1]-11)/windowSize)\n    resting <- matrix(rep(NA,numit*3),ncol=3)\n    \n    for(j in 1:numit){\n      # A one second window\n      mywindow <- matrix(rep(NA, windowSize*3),ncol=3)\n      for(i in 1:windowSize){\n        myline <- strsplit(nextElem(it), \",\")[[1]]\n        mywindow[i,] <- c(as.numeric(myline[1]),\n                          as.numeric(myline[2]),\n                          as.numeric(myline[3]))\n      }\n      \n      sd11 <- sd(mywindow[,1],na.rm=TRUE)\n      sd12 <- sd(mywindow[,2],na.rm=TRUE)\n      sd13 <- sd(mywindow[,3],na.rm=TRUE)\n      resting[j,] <- c(sd11, sd12, sd13)\n    }\n    \n    mydata <-  c(mean(resting[,1],na.rm=TRUE),mean(resting[,2],na.rm=TRUE),mean(resting[,3],na.rm=TRUE))\n  }\n  \n  mydata\n}\n",
    "created" : 1512343832187.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1211731216",
    "id" : "A306BAED",
    "lastKnownWriteTime" : 1512343835,
    "last_content_update" : 1512343835995,
    "path" : "Z:/My documents/1packages/acc/R/readRaw.R",
    "project_path" : "R/readRaw.R",
    "properties" : {
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
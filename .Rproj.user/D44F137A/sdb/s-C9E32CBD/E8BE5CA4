{
    "collab_server" : "",
    "contents" : "#' @export\n#' @importFrom utils head tail \n#' @importFrom stats rbinom rgamma rpois na.omit aggregate\n\n\n\nsimPA <- function(n, type='noninf', beta=1.5, minday, maxday){\n  \n  if(type=='noninf'){k2.min <- k1.min <- minday}\n  if(type=='noninf'){k2.num <- k1.num <- maxday}\n  \n  if(type=='inf'){k1.min <- minday[1]}\n  if(type=='inf'){k2.min <- minday[2]}\n  if(type=='inf'){k1.num <- maxday[1]}\n  if(type=='inf'){k2.num <- maxday[2]}\n  \n  ## covariate x1 generated from Bernoulli\n  x1=rbinom(n,1,0.5); \n  x=cbind(x1)\n  beta1=beta\n  nu=10;\n  parms=c(beta1) \n  phi=rgamma(n,shape=nu,rate=nu)\n  \n  ## generating the number of observations for each subject\n  k1 <- sample(k1.min:k1.num,n,replace=TRUE) \n  k2 <- sample(k1.min:k2.num,n,replace=TRUE) \n  \n  if(k1.min == k1.num){\n    k1 <- rep(k1.min,n) \n  }\n  \n  if(k2.min == k2.num){\n    k2 <- rep(k2.min,n) \n  }\n  \n  k=k1*(ifelse(x==1 & phi<=1,1,0))+  k2*(ifelse(x==1 & phi<=1,0,1))\n  K=max(k);\n  \n  ## generating random time gaps for each subject\n  y=matrix(,n,K);\n  for (i in 1:n){\n    if(x[i]==1 & phi[i]<=1){tg <- sort(sample(1:7,k[i],replace=FALSE))}\n    if(!(x[i]==1 & phi[i]<=1)){tg <- sort(sample(1:7,k[i],replace=FALSE))}\n    y[i,1:k[i]]=tg}  \n  t <- y\n  \n  ## setting the true baseline mean function\n  mu=function(t){6*t}\n  ##getting the number of events between time intervals\n  z=matrix(,n,K);\n  xparms=c();for (s in 1:nrow(x)){xparms[s]<-sum(x[s,]*parms)}\n  for (i in 1:n){\n    z[i,1]<-rpois(1,mu(t[i,1])*exp(xparms[i])*phi[i])\n    if (k[i]>1){\n      z[i,2:k[i]]<-rpois(k[i]-1,(mu(t[i,2:k[i]])-mu(t[i,1:(k[i]-1)]))*exp(xparms[i])*phi[i])\n    }\n  }\n  \n  TestD<-list(t=t, x=x, z=z, k=k, K=K)\n  ID <- NULL\n  options(warn=-1)\n  simdata <- NULL\n  \n  for(m in 1:n){\n    \n    mydata <- data.frame(ID=m,\n                         day=as.numeric(na.omit(TestD$t[m,])),\n                         x1=TestD$x[m,1],\n                         min=as.numeric(na.omit(TestD$z[m,])),\n                         z=round(phi[m],2))\n    \n    mydata <- data.frame(ID=m,aggregate(min~day,data=mydata,FUN=sum),\n                         x1=TestD$x[m,1],\n                         z=round(phi[m],2))\n    \n    newdata <- mydata[ which(mydata$min!=0), ]\n    \n    if(nrow(newdata)==0){\n      savedata <- data.frame(ID=m,\n                             day=na.omit(TestD$t[m,])[length(na.omit(TestD$t[m,]))],\n                             x1=TestD$x[m,1], min=0,\n                             z=round(phi[m],2))\n    }\n    if(nrow(newdata)>0){\n      savedata <-    newdata\n    }\n    simdata <- rbind(simdata,savedata)\n  }\n  \n  rownames(simdata) <- c()\n  \n  simdata\n}",
    "created" : 1512343845173.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "645161685",
    "id" : "E8BE5CA4",
    "lastKnownWriteTime" : 1512343848,
    "last_content_update" : 1512343848959,
    "path" : "Z:/My documents/1packages/acc/R/simPA.R",
    "project_path" : "R/simPA.R",
    "properties" : {
    },
    "relative_order" : 16,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "#' @export\n#' @importFrom DBI dbConnect\n#' @importFrom RSQLite SQLite\n#' @importFrom stats complete.cases\n\n\nreadCounts <- function (filename, dateformat='%y-%b-%d', timeformat='%H:%M:%S',timezone='GMT') {\n  myfiletype <- substring(filename, nchar(filename) - 3, nchar(filename))\n  if (myfiletype == \".dat\" | myfiletype == \".csv\") {\n    Tfile <- file(filename, \"r\")\n    if (isOpen(Tfile, \"r\")) {\n      seek(Tfile, 0, rw = \"r\")\n      lines = suppressWarnings(readLines(Tfile))\n      close(Tfile)\n    }\n    skipPos = grep(\"-----\", lines)[2]\n    startTPos = grep(\"Start Time\", lines)\n    startEPos = grep(\"Epoch Period\", lines)\n    startDPos = grep(\"------------ Data File Created By ActiGraph \", \n                     lines)\n    if (length(startDPos) == 0) {\n      startDPos = grep(\"------------ Data Table File Created By ActiGraph \", \n                       lines)\n    }\n    deviceName = gsub(\"------------ Data File Created By ActiGraph \", \n                      \"\", lines[startDPos])\n    deviceName = head(strsplit(deviceName, split = \" \")[[1]], \n                      1)\n    if (substring(deviceName, 1, 1) != \"G\" & substring(deviceName, 1, 1) != \"w\" ) {\n      deviceName = gsub(\"------------ Data Table File Created By ActiGraph \", \n                        \"\", lines[startDPos])\n      deviceName = head(strsplit(deviceName, split = \" \")[[1]], \n                        1)\n    }\n    startSPos = grep(\"Serial Number: \", lines)\n    startTime = gsub(\"Start Time \", \"\", lines[startTPos])\n    startTime = gsub(\"\\\\,\", \"\", startTime)\n    startTime = gsub(\"[[:blank:]]\", \"\", startTime)\n    startDatePos = grep(\"Start Date \", lines)\n    startDateChr = gsub(\"Start Date \", \"\", lines[startDatePos])\n    startDateChr = gsub(\"\\\\,\", \"\", startDateChr)\n    startDateChr = gsub(\"[[:blank:]]\", \"\", startDateChr)\n    if (grepl(\"/\", startDateChr) == TRUE) {\n      startDate = strsplit(startDateChr, \"/\")[[1]]\n      if (nchar(startDate[1]) == 1) {\n        startDate[1] = paste(\"0\", startDate[1], sep = \"\")\n      }\n      if (nchar(startDate[2]) == 1) {\n        startDate[2] = paste(\"0\", startDate[2], sep = \"\")\n      }\n      startDate = paste(startDate[3], startDate[1], startDate[2], \n                        sep = \"-\")\n    }\n    if (grepl(\"-\", startDateChr) == TRUE) {\n      startDate = strsplit(startDateChr, \"-\")[[1]]\n      if (nchar(startDate[1]) == 1) {\n        startDate[1] = paste(\"0\", startDate[1], sep = \"\")\n      }\n      if (nchar(startDate[2]) == 1) {\n        startDate[2] = paste(\"0\", startDate[2], sep = \"\")\n      }\n      startDate = paste(startDate[3], startDate[2], startDate[1], \n                        sep = \"-\")\n    }\n    rawTimeStamp1 = paste(startDate, startTime, sep = \" \")\n    epochTime = gsub(\"Epoch Period (hh:mm:ss) \", \"\", lines[startEPos])\n    epochTime = gsub(\"\\\\,\", \"\", epochTime)\n    epochTime = substr(epochTime, nchar(epochTime) - 7, nchar(epochTime))\n    ep = as.numeric(as.difftime(c(epochTime), units = \"secs\"))\n    serialNumber = gsub(\"Serial Number: \", \"\", lines[startSPos])\n    serialNumber = gsub(\"\\\\,\", \"\", serialNumber)\n  }\n  if (myfiletype == \".agd\") {\n    con = DBI::dbConnect(SQLite(), dbname = filename)\n    settings <- DBI::dbReadTable(con, \"settings\")\n    deviceName <- settings$settingValue[settings$settingName == \n                                          \"devicename\"]\n    serialNumber <- settings$settingValue[settings$settingName == \n                                            \"deviceserial\"]\n    ep <- as.numeric(as.character(settings$settingValue[settings$settingName == \n                                                          \"epochlength\"]))\n    startdatetime <- settings$settingValue[settings$settingName == \n                                             \"startdatetime\"]\n    startdatetime2 <- as.POSIXlt((as.numeric(startdatetime)/1e+07), \n                                 origin = \"0001-01-01 00:00:00\", tz = \"GMT\")\n    startDate <- substring(startdatetime2, 1, 10)\n  }\n  type <- NA\n  if (deviceName == \"GT1M\") {\n    type <- \"uni-axial\"\n  }\n  if (deviceName == \"GT3X\") {\n    type <- \"tri-axial\"\n  }\n  if (deviceName == \"GT3XPlus\") {\n    type <- \"tri-axial\"\n  }\n  if (deviceName == \"GT3X+\") {\n    type <- \"tri-axial\"\n  }\n  if (deviceName == \"wGT3XBT\") {\n    type <- \"tri-axial\"\n  }\n  cat(noquote(paste(\"Raw data read for \", deviceName, \" device. This is a \", \n                    type, \" device.\", sep = \"\")))\n  cat(\"\\n\")\n  cat(noquote(paste(\"Serial number: \", serialNumber, \".\", sep = \"\")))\n  cat(\"\\n\")\n  cat(noquote(paste(\"Start date is \", startDate, \" and epoch is \", \n                    ep, \" seconds.\", sep = \"\")))\n  cat(\"\\n\")\n  if (myfiletype == \".dat\" | myfiletype == \".csv\") {\n    startline = skipPos + 1\n    #startline = skipPos + 2\n    endline = length(lines)\n    col0 = gsub(\"[[:blank:]]+\", \" \", lines[startline])\n    col = strsplit(col0, c(\"\\\\, |\\\\,| \"))[[1]]\n    col = length(col[col != \"\"])\n    timeline = c()\n    if (substring(gsub(\"[[:blank:]]+\", \" \", lines[startline])[1], \n                  1, 4) != \"Date\" &\n        substring(gsub(\"[[:blank:]]+\", \" \", lines[startline])[1], \n                  1, 4) != \"Axis\" ) {\n      mymatrix <- matrix(NA, (endline - startline + 1), \n                         col)\n      for (i in startline:endline) {\n        temp0 = gsub(\"[[:blank:]]+\", \" \", lines[i])\n        temp = strsplit(temp0, c(\"\\\\, |\\\\,| \"))[[1]]\n        temp = temp[temp != \"\"]\n        if (length(temp) > 0) {\n          mymatrix[(i - startline + 1), 1:length(temp)] <- temp\n        }\n      } #head(mymatrix); # View(t(mymatrix)) # View(counts) # View(as.vector(t(mymatrix)))\n      counts = as.numeric(as.vector(t(mymatrix)))\n      counts <- counts[!is.na(counts)]\n      if (type == \"uni-axial\") {\n        timeline = (0:as.integer((length(counts)) - 1) * \n                      ep)\n        rawTimeStamp = rep(rawTimeStamp1, (length(counts)))\n        rst = gsub(\" GMT\", \"\", as.POSIXlt(rawTimeStamp, \n                                          tz = \"GMT\") + timeline)\n        data = data.frame(TimeStamp = as.vector(rst), \n                          counts = counts)\n      }\n      if (type == \"tri-axial\") {\n        n <- length(counts)\n        x = counts[seq(1, n, 3)]\n        y = counts[seq(2, n, 3)]\n        z = counts[seq(3, n, 3)]\n        maxlength <- max(length(x), length(y), length(z))\n        if (length(x) < maxlength) {\n          x <- c(x, NA)\n        }\n        if (length(y) < maxlength) {\n          y <- c(y, NA)\n        }\n        if (length(z) < maxlength) {\n          z <- c(z, NA)\n        }\n        timeline = (0:(maxlength - 1) * ep)\n        rawTimeStamp = rep(rawTimeStamp1, maxlength)\n        rst = gsub(\" GMT\", \"\", as.POSIXlt(rawTimeStamp, \n                                          tz = \"GMT\") + timeline)\n        data = data.frame(TimeStamp = as.vector(rst), \n                          x = x, y = y, z = z)\n      }\n    }\n    if (substring(gsub(\"[[:blank:]]+\", \" \", lines[startline])[1], \n                  1, 4) == \"Date\" & \n        substring(gsub(\"[[:blank:]]+\", \" \", lines[startline])[1], \n                  1, 4) != \"Axis\" ) {\n      mymatrix <- matrix(NA, (endline - startline), col)\n      for (i in startline:endline) {\n        temp0 = gsub(\"[[:blank:]]+\", \" \", lines[i])\n        temp = strsplit(temp0, c(\"\\\\, |\\\\,| \"))[[1]]\n        temp = temp[temp != \"\"]\n        if (length(temp) > 0 & temp[1] != \"Date\") {\n          mymatrix[(i - startline), 1:length(temp)] <- temp\n        }\n      }\n      if (type == \"uni-axial\") {\n        data = data.frame(TimeStamp = paste(mymatrix[, \n                                                     1], mymatrix[, 2]), counts = mymatrix[, 3])\n      }\n      if (type == \"tri-axial\") {\n        data = data.frame(TimeStamp = paste(mymatrix[, \n                                                     1], mymatrix[, 2]), x = mymatrix[, 3], y = mymatrix[, \n                                                                                                         4], z = mymatrix[, 5])\n      }\n    }\n    \n    if (substring(gsub(\"[[:blank:]]+\", \" \", lines[startline])[1], \n                  1, 4) == \"Axis\" & type == \"tri-axial\") {\n      mymatrix <- matrix(NA, (endline - startline), col)\n      for (i in startline:endline) {\n        temp0 = gsub(\"[[:blank:]]+\", \" \", lines[i])\n        temp = strsplit(temp0, c(\"\\\\, |\\\\,| \"))[[1]]\n        temp = temp[temp != \"\"]\n        if (length(temp) > 0 & temp[1] != \"Date\") {\n          mymatrix[(i - startline), 1:length(temp)] <- temp\n        }\n      }\n      startingTime <- strptime(paste(startDate,startTime),format=paste(dateformat,timeformat),tz=timezone)\n      timesequence <- seq(from=startingTime,by=paste(ep,'sec'),length=(endline - startline))\n      if (type == \"tri-axial\") {\n        data = data.frame(TimeStamp = timesequence, x = as.numeric(mymatrix[, 1]), \n                          y = as.numeric(mymatrix[, 2]), z = as.numeric(mymatrix[, 3]))\n      } # View(data)\n    }\n    \n  }\n  if (myfiletype == \".agd\") {\n    counts <- DBI::dbReadTable(con, \"data\")\n    counts <- counts[complete.cases(counts), ]\n    timeline = (0:as.integer((dim(counts)[1]) - 1) * ep)\n    rawTimeStamp = rep(startdatetime2, dim(counts)[1])\n    rst = gsub(\" GMT\", \"\", as.POSIXlt(rawTimeStamp, tz = \"GMT\") + \n                 timeline)\n    if (type == \"uni-axial\") {\n      data = data.frame(TimeStamp = as.vector(rst), counts = counts[, \n                                                                    2])\n    }\n    if (type == \"tri-axial\") {\n      data = data.frame(TimeStamp = as.vector(rst), x = counts[, \n                                                               2], y = counts[, 3], z = counts[, 4])\n    }\n  }\n  data\n}",
    "created" : 1512343823583.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1723299261",
    "id" : "D2F82113",
    "lastKnownWriteTime" : 1512343663,
    "last_content_update" : 1512343663,
    "path" : "Z:/My documents/1packages/acc/R/readCounts.R",
    "project_path" : "R/readCounts.R",
    "properties" : {
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}